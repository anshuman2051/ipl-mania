{"version":3,"sources":["components/GenTable/GenTable.module.css","components/GenTable/GenTable.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","GenTable","tblHead","this","props","names","map","data","index","key","tblData","temp","d","push","Fragment","heading","Table","striped","bordered","hover","className","classes","Component","App","teamJson","require","teamSeasons","state","teams","seasons","players","finalPlayers","filter","newTeamSeasons","season","orangePlayerName","purplePlayerName","manOfTheSeries","player","setState","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"k9DACAA,EAAOC,QAAU,CAAC,MAAQ,0B,8nhFC4CXC,E,uKApCP,IAAMC,EAAUC,KAAKC,MAAMC,MAAMC,KAAI,SAACC,EAAMC,GACxC,OACI,wBAAIC,IAAKD,GAAQD,MAInBG,EAAUP,KAAKC,MAAMG,KAAKD,KAAK,SAACC,EAAKC,GACvC,IAAIG,EAAO,GACX,IAAK,IAAIC,KAAKL,EACVI,EAAKE,KAAK,wBAAIJ,IAAKG,GAAIL,EAAKK,KAEhC,OACI,wBAAIH,IAAKD,GACJG,MAKb,OACI,kBAAC,IAAMG,SAAP,KACI,4BAAKX,KAAKC,MAAMW,SAChB,kBAACC,EAAA,EAAD,CAAOC,SAAO,EAACC,UAAQ,EAACC,OAAK,EAACC,UAAWC,IAAQL,OAC7C,+BACI,4BACKd,IAGT,+BACKQ,S,GAhCFY,aCuERC,E,kDAnEf,WAAYnB,GAAO,IAAD,sBACd,cAAMA,GACN,IAAMoB,EAAWC,EAAQ,GACnBC,EAAcD,EAAQ,GAHd,OAKd,EAAKE,MAAQ,CACTC,MAAOJ,EACPK,QAASH,EACTI,QAAS,MARC,E,gEAad,IAAMN,EAAWC,EAAQ,GACnBC,EAAcD,EAAQ,GACtBK,EAASL,EAAQ,IAKjBM,EAHaD,EAAQE,QAAQ,SAACF,GAAD,OACR,IAAzBA,EAAO,aAEuBxB,KAAK,SAACwB,GAEpC,cADOA,EAAO,UACPA,KAIHG,EAAiBP,EAAYpB,KAAK,SAAC4B,GACvC,IADgD,EAC5CC,EAAmB,WACnBC,EAAmB,GACnBC,EAAiB,GAH2B,cAK9BP,GAL8B,IAKhD,IAAI,EAAJ,qBAA0B,CAAC,IAAnBQ,EAAkB,QACrBJ,EAAM,gBAAsBI,EAAM,YACnCH,EAAmBG,EAAM,aACvBJ,EAAM,gBAAsBI,EAAM,YACpCF,EAAoBE,EAAM,aACxBJ,EAAM,uBAA6BI,EAAM,YAC3CD,EAAkBC,EAAM,cAXoB,8BAgBhD,OAHAJ,EAAM,cAAoBC,EAC1BD,EAAM,cAAoBE,EAC1BF,EAAM,qBAA2BG,EAC1BH,KAET/B,KAAKoC,SAAS,CAACT,QAASC,EAAcH,MAAOJ,EAAUK,QAAUI,M,+BAKjE,OACE,yBAAKb,UAAU,OACXjB,KAAKwB,MAAME,QACb,kBAAC,EAAD,CAAKd,QAAQ,QAAQV,MAAO,CAAC,KAAK,OAAO,QAASE,KAAMJ,KAAKwB,MAAMC,QAAW,KAE7EzB,KAAKwB,MAAMC,MACZ,kBAAC,EAAD,CAAKb,QAAQ,UAAUV,MAAO,CAAC,KAAK,OAAO,aAAa,aAAa,qBAAsBE,KAAMJ,KAAKwB,MAAME,UAAY,KAGtH1B,KAAKwB,MAAMG,QACX,kBAAC,EAAD,CAAKf,QAAQ,UAAUV,MAAO,CAAC,KAAK,OAAO,aAAa,aAAa,qBAAsBE,KAAMJ,KAAKwB,MAAMG,UAAW,U,GA5D/GR,aCIEkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.2aea89f1.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Table\":\"GenTable_Table__at4FV\"};","import React,{ Component} from \"react\";\nimport Table from 'react-bootstrap/Table';\nimport classes from './GenTable.module.css';\n\n\nclass GenTable extends Component{\n\n    render(){\n\n        const tblHead = this.props.names.map((data, index)=>{\n            return(\n                <th key={index}>{data}</th>\n            );\n        })\n\n        const tblData = this.props.data.map( (data,index)=>{\n            let temp = [];\n            for( let d in data){\n                temp.push(<td key={d}>{data[d]}</td>) ;\n            }\n            return(\n                <tr key={index }>\n                    {temp}\n                </tr>\n            )\n        });\n\n        return(\n            <React.Fragment>\n                <h2>{this.props.heading}</h2>\n                <Table striped bordered hover className={classes.Table}>\n                    <thead>\n                        <tr>\n                            {tblHead}\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {tblData}\n                    </tbody>\n                </Table>\n            </React.Fragment>\n        );\n    }\n\n}\nexport default GenTable;","import React, {Component} from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\n\nimport Tbl from './components/GenTable/GenTable';\n\n\n\nclass App extends Component {\nconstructor(props){\n    super(props);\n    const teamJson = require('./ipl_json_data/teams.json');\n    const teamSeasons = require('./ipl_json_data/seasons.json');\n\n    this.state = {\n        teams :teamJson,\n        seasons: teamSeasons,\n        players: null \n    };\n  }\n\n  componentDidMount(){\n    const teamJson = require('./ipl_json_data/teams.json');\n    const teamSeasons = require('./ipl_json_data/seasons.json');\n    const players= require('./ipl_json_data/player.json');\n\n    const newPlayers = players.filter( (players)=>(\n      players[\"Is_Umpire\"] === 0\n    ));\n    const finalPlayers = newPlayers.map( (players)=>{\n      delete players[\"Is_Umpire\"];\n      return players;\n    });\n\n    //finding matches for orange caps\n    const newTeamSeasons = teamSeasons.map( (season)=>{\n      let orangePlayerName = \" nothing\";\n      let purplePlayerName = \"\";\n      let manOfTheSeries = \"\";\n\n      for(let player of players){\n        if(season[\"Orange_Cap_Id\"] === player[\"Player_Id\"]) \n          orangePlayerName = player[\"Player_Name\"] ;\n        if( season[\"Purple_Cap_Id\"] === player[\"Player_Id\"]) \n          purplePlayerName =  player[\"Player_Name\"]; \n        if( season[\"Man_of_the_Series_Id\"] === player[\"Player_Id\"]) \n          manOfTheSeries =  player[\"Player_Name\"]; \n      }\n      season[\"Orange_Cap_Id\"] = orangePlayerName;\n      season[\"Purple_Cap_Id\"] = purplePlayerName;\n      season[\"Man_of_the_Series_Id\"] = manOfTheSeries;\n      return season;\n    }) \n    this.setState({players: finalPlayers, teams: teamJson, seasons : newTeamSeasons});\n\n  }\n  render(){\n\n    return (\n      <div className=\"App\">\n        { this.state.seasons ? \n        <Tbl heading=\"Teams\" names={[\"id\",\"team\",\"code\"]} data={this.state.teams}/> : null\n        }\n        {this.state.teams ?\n        <Tbl heading=\"seasons\" names={[\"id\",\"year\",\"Orange Cap\",\"Purple cap\",\"Man of the series\"]} data={this.state.seasons}/>: null\n        }\n        {\n          this.state.players ? \n          <Tbl heading=\"Players\" names={[\"id\",\"year\",\"Orange Cap\",\"Purple cap\",\"Man of the series\"]} data={this.state.players}/>:null\n        }\n        \n      </div>\n    );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}